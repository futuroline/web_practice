DOM(document object model)文档对象模型
其实就是将一些标记型的文档以及文档中的内容当成对象
为什么要将这些文档以及其中的标签封装成对象呢？？
因为可以在对象中定义其属性和行为，可以方便操作这些对象 

DOM在封装标记型文档时，有三层模型：
DOM1:针对html文档
DOM2:针对xml文档
DOM3:针对xml文档

html，xhtml，xml 这些都是标记型文档

DHTML：是多个技术的综合体    叫做动态的html
	html:负责将数据进行标签的封装
	css:负责标签的样式
	dom:负责将标签以及标签中的数据封装成对象
	javascript:负责通过程序设计方式来操作这些对象

标签之间存在则层次关系：
window:浏览器中一个打开的窗口
	--|
	--|
document
html
	|--head
		|--title
		|--base
		|--link
		|--meta
		|--style
		|--script
	|--body
		|--div
		|--form
			|--input
			|--select
		|--span
		|--a
		|--table
			|--tbody
				|--tr
					|--td
					|--td
		|--dl
			|--dt
			|--dd
通过这个标签层次，可以形象的看做一个树形结构，那么我们也可以称标记文档，加载进内存的是一颗DOm树
这些标签以及标签的数据都是这棵树上的节点

当标记型文档加载进内存，那么内存中就有了一个对应的DOM树.

DOM对于标记型文档的解析有一个弊端，就是文档过大，相对消耗资源
对于大型文档可以使用SAX这种方式解析

节点类型：
标签型节点：类型：1
文本型节点：类型：3
注释型节点：类型：8
document：类型：9
属性节点：类型：2

注意：标签之间存在空行时，会出现一个空白的文本节点，在获取节点时一定要注意
节点关系：
父节点：parentNode
子节点：childNodes:直接子节点，返回的是一个节点对象数组
兄弟节点
	上一个兄弟节点：previousSibling
	下一个兄弟节点：nextSibling


//获取节点可以通过节点的层次关系完成
//也可以通过document对象完成
getElementsById:通过ID属性值获取对应的节点对象，如果有多个id值相同，获取到的是第一个ID所属的对象，所以尽量保证ID一致,返回的是一个对象
getElementsByName:通过标签的name属性值获取对象，返回一堆对象，其实是一个对象数组
getElementsByTagName:即没有Id也没有name时，可以通过标签名字获取对象，返回一堆对象，其实是一个数组，大多容器型标签double具备该方法


//dom4j:dom for java












