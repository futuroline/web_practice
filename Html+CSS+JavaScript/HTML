html:超文本标记语言。
    html语言中是由标签组成的
	html中的数据都会封装在标签中，因为可以通过标签中的属性值的改变对封装内数据进行操作。
	 
	确定html代码的范围 <html></html>
	在该范围中可以定义两部分内容：一部分是头，一部分是体
	<html>
		<head>
		</head>
		<body>
		</body>
	</html>
	 
	head：网页的一些属性信息，比如标题
	body: 网页显示的数据。
	 
	标签特点：对于数据进行封装，那么就有开始标签和结束标签
	          但是也有一些标签只体现单一功能：所以不需要结束标签，规范中要求标签必须要结束，所以这样的标签在内部结束。
			  如：<br/> <hr /> <img />  <input />
			   
	标签格式：<标签名 属性名=“属性值”>数据</标签名>
	          <标签名 属性名=“属性值” />
			   
	常见标签：
	字体：<font>
	      <font size="7" color="#ffff00" >数据</font>
	特殊部分：如果要在页面显示一些特殊符号，需要进行转义。
		<:&lt;  >:&gt;  &:&amp;  空格：&nbsp；
	标题： <h1> <h2> <h3> <h4> ...<h6>  
	
	列表标签：<dl></dl>
				上层项目：<dt>
				下层项目：<dd>
				项目符号标签：
						<ul>
						<ol>
						这两个标签中的列表项都由<li>标签封装
				示例：
				1、游戏名称
					a.星际
					b.红番
				2、游戏内容
					攻略
					秘籍
	
	图像标签：<img>
		<img src="" alt="图像说明文字" />
	
	表格标签 <table>
		表格由行所组成，行由单元格组成
		表格中默认都由一个tbody标签
		标题标签：<caption>
		<table border="1" bodercolor="red" width="60%" cellpadding="10" cellspacing="0">
			<tr>
				<th></th>
				<th></th>
			</tr>
			<tr>
				<td></td>
				<td></td>
			</tr>
		</table>
		表格是最常用的标签，用于对数据进行格式化
		
	超链接：<a>
		<a href="http//:www.baidu.com" targer="_blank" title="超连接说明">百度网站</a>
		超链接被点击后，会启动引擎所对应的解析程序。
		去查找指定的主机
		http解析：
		1、先找本地主机的hosts文件。如果没有找到该主机对应的IP地址
		2、去公网DNS服务器上去找对应的IP地址
		
		<a href="mailto:abc@sina.com?subject="haha&cc=qq@163.com">联系我们</a>
		当点击超连接时，就会出现邮件相关联的解析程序，本机默认是outlook.
		
		超链接的另一个作用：
		定位标记
		<a name="top">一个位置</a>
		
		<a href="#top">回到那个文字</a>
		
	表单标签：
		该标签是可以和服务端进行交互的。
		<form>
		</form>
		表单标签中元素：
		<input>:该标签因为type属性的值的不同，所对应的组件不一样
		type属性：
				1、text：文本框，输入的文本可见
				2、password：密码框， 输入的文本不可见
				3、radio：单选框，注意，要被选中，必须给单选框定义一个属性name.
							当有多个单选框时，只能有一个被选中，name这些单选框的name值必须相同。
				4、checkbox：复选框：当对多个数据进行同时选中时使用的
				5、file：可以进行文件选择的组件，通常用于附件，或者文件上传
				6、hidden：隐藏组件，该组件不会页面上显示，但是其定义的name和value可以提交到服务器
				7、button：按钮组件，定义一个按钮默认是没有任何效果的，可以通过注册事件并加入自定义效果。
				8、reset：重置按钮， 将组件中被操作的效果还原到出现状态
				9、submit：提交按钮，将组件中添加的数据提交到指定的目的地
				10、image：图像组件，为了避免提交按钮的难看，可以通过image的src属性连接一个好看的按钮图片完成提交效果
		下拉菜单：<select>
			每一个下拉菜单项都有option进行封装
			<select>
				<option></option>
				<option></option>
				...
			</select>
		
		文本区域：<textarea>
		
		表单组件通常都需要定义name和value属性，因为要将数据发送给服务端，服务端只有知道了该name的值才可以对提交的数据进行分别获取
		
		
		form标签中常见的属性：
		action：指定数据提交的目的地  method:提交方式， 两种常用值，get和post,get为默认
		
		get和post的区别：
		get：会将提交的数据显示在地址栏上，
		post：不会讲数据显示在地址栏
		
		get:提交数据的体积受地址栏的限制
		post:可以提交大体积的数据
		
		get：对敏感信息不安全
		post：对敏感数据安全
		
		get:会将提交信息封装在请求行，也就是http消息头之前
		post：会将提交信息封装在数据体，也就是http消息头之后的空行之后
		
		对于服务端而言
		表单提交尽量用post,因为涉及到编码问题。 因为tomcat服务端默认的解码是ISO8859-1
		对于post提交的中文，在服务端可以直接使用setCharacterEncoding(gbk)就可以解决
		对于get提交的中文，在服务端只能用通过ISO8859-1将数据编码一次，再通过指定的码表如GBK解码。
		
		使用表单的组件不一定要定义form标签（此时不需要与服务端做互动）。只有需要将数据进行服务端的提交时候才会用到form标签
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		